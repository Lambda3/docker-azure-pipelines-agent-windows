# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish Docker image

on:
  workflow_dispatch:
    inputs:
      skipUpdateCheck:
        description: "Should skip checking if image needs update and always run the build steps"
        required: false
        default: false
        type: boolean
  schedule:
    - cron: "5 3 * * *"
  push:
    branches:
      - main
    tags:
      - "*"
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: windows-2019
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Check if update available
        id: check
        uses: giggio/docker-image-update-checker@v2
        with:
          base-image: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019
          image: lambda3/azure-pipelines-agent-windows
          os: windows
          verbose: true

      - name: Extract metadata (tags, labels) for Docker (Latest image)
        id: meta_latest
        uses: docker/metadata-action@v3
        with:
          images: lambda3/azure-pipelines-agent-windows
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=tag
        if: success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || github.event.inputs.environment.skipUpdateCheck == 'true')

      - name: Build image (latest)
        working-directory: .
        run: |
          $ErrorActionPreference = "Stop"
          docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD
          if ($LASTEXITCODE -ne 0) { throw "Command failed." }
          Invoke-Expression "docker build --pull $($env:TAGS.Split("`n") | % { '-t "' + $_ + '"' }) $($env:LABELS.Split("`n") | % { '--label "' + $_ + '"' }) ./agent/"
          docker logout
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          TAGS: ${{ steps.meta_latest.outputs.tags }}
          LABELS: ${{ steps.meta_latest.outputs.labels }}
        if: success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || github.event.inputs.environment.skipUpdateCheck == 'true')

      - name: Push image (latest)
        run: |
          $ErrorActionPreference = "Stop"
          docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD
          if ($LASTEXITCODE -ne 0) { throw "Command failed." }
          $($env:TAGS.Split("`n") | % {
            docker push $_
            if ($LASTEXITCODE -ne 0) { throw "Command failed." }
          })
          docker logout
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          TAGS: ${{ steps.meta_latest.outputs.tags }}
        if: success() && (github.event_name == 'push' || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || github.event.inputs.environment.skipUpdateCheck == 'true')

      - name: Extract metadata (tags, labels) for Docker (Docker image)
        id: meta_docker
        uses: docker/metadata-action@v3
        with:
          images: lambda3/azure-pipelines-agent-windows
          flavor: |
            latest=false
          tags: |
            type=raw,value=docker,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,suffix=-docker,event=tag
        if: success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || github.event.inputs.environment.skipUpdateCheck == 'true')

      - name: Build image (docker)
        working-directory: .
        run: |
          $ErrorActionPreference = "Stop"
          docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD
          if ($LASTEXITCODE -ne 0) { throw "Command failed." }
          Invoke-Expression "docker build --pull $($env:TAGS.Split("`n") | % { '-t "' + $_ + '"' }) $($env:LABELS.Split("`n") | % { '--label "' + $_ + '"' }) ./agent-docker/"
          docker logout
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          TAGS: ${{ steps.meta_docker.outputs.tags }}
          LABELS: ${{ steps.meta_docker.outputs.labels }}
        if: success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || github.event.inputs.environment.skipUpdateCheck == 'true')

      - name: Push image (docker)
        run: |
          $ErrorActionPreference = "Stop"
          docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD
          if ($LASTEXITCODE -ne 0) { throw "Command failed." }
          $($env:TAGS.Split("`n") | % {
            docker push $_
            if ($LASTEXITCODE -ne 0) { throw "Command failed." }
          })
          docker logout
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          TAGS: ${{ steps.meta_docker.outputs.tags }}
        if: success() && (github.event_name == 'push' || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || github.event.inputs.environment.skipUpdateCheck == 'true')
